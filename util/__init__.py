import sys
import os
import datetime

from util import externals
from pubsub import pub

IN_AXIS = "AXIS_PROGRESS_BAR" in os.environ

# Setting QUIET to True will stop almost all console messages
QUIET = False

VERSION = sys.version_info[0]

# entry value check return codes:
OK = 0  # value is ok (may require recalculation)
NOR = 1  # value is a valid number change that does not require recalc
INV = 2  # value is invalid
NAN = 3  # value is not a number

# entry color codes:
COLOR_OK = 'white'
COLOR_NOR = 'white'
COLOR_INV = 'red'
COLOR_NAN = 'red'
COLOR_RECALC = 'yellow'

if VERSION == 3:
    # from tkinter import *
    # from tkinter.filedialog import *
    import tkinter.messagebox
    MAXINT = sys.maxsize
else:
    # from Tkinter import *
    # from tkFileDialog import *
    import tkMessageBox
    MAXINT = sys.maxint


def fmessage(text, newline=True):
    if IN_AXIS or QUIET:
        return
    try:
        sys.stdout.write(text)
        if newline:
            sys.stdout.write("\n")
    except:
        pass


PIL = False
PUBSUB = False
OVD_AVAILABLE = False
TTF_AVAILABLE = False
POTRACE_AVAILABLE = False

try:
    PIL = externals.check_pil()
    PUBSUB = externals.check_pubsub()
    OVD_AVAILABLE = externals.check_ovd()
    TTF_AVAILABLE = externals.check_ttf()
    POTRACE_AVAILABLE = externals.check_potrace()
except Exception as e:
    fmessage(str(e))


def f_engrave_version():
    return '1.69b'


def header_text():
    header = []
    # todays_date = datetime.date.today().strftime("%B %d, %Y")
    todays_datetime = datetime.datetime.now().strftime("%I:%M %p %B %d, %Y")
    header.append('(Code generated by OOF-Engrave-' + f_engrave_version() + '.py widget )')
    header.append('(by JvO 2018 (refactored F-Engrave by Scorch - 2017 )')
    header.append('(file created ' + todays_datetime + ')')
    header.append('(=========================================================)')

    return header


def message_box(title, message):
    if VERSION == 3:
        tkinter.messagebox.showinfo(title, message)
    else:
        tkMessageBox.showinfo(title, message)
        pass


def message_ask_ok_cancel(title, message):
    if VERSION == 3:
        result = tkinter.messagebox.askokcancel(title, message)
    else:
        result = tkMessageBox.askokcancel(title, message)
    return result


def validate_entry_set(val, check_flag=0, new=0, setting=None, settings=None):
    '''Validate a GUI entry value and show informational status_message when applicable'''

    retval = 1

    if setting is not None and settings is None:
        print("validate_entry_set, no settings for setting: %s" % setting)

    if check_flag == OK and new == 0:
        val.configure(bg=COLOR_RECALC)
        pub.sendMessage('status_color', color=COLOR_RECALC)
        pub.sendMessage('status_message', msg='Recalculation required.')

    elif check_flag == NAN:
        val.configure(bg=COLOR_NAN)
        pub.sendMessage('status_color', color=COLOR_NAN)
        pub.sendMessage('status_message', msg='Value should be a number.')

    elif check_flag == INV:
        val.configure(bg=COLOR_INV)
        # set color only, the message has been set in the entry validation callback
        pub.sendMessage('status_color', color=COLOR_INV)

    elif (check_flag == OK or check_flag == NOR) and new == 1:
        val.configure(bg=COLOR_OK)
        pub.sendMessage('status_message_bbox', color=COLOR_OK)

    elif check_flag == NOR and new == 0:
        val.configure(bg=COLOR_NOR)
        pub.sendMessage('status_message_bbox', color=COLOR_NOR)

    elif (check_flag == OK or check_flag == NOR) and new == 2:
        retval = 0

    else:
        pass

    if (setting is not None) and \
            (check_flag == OK or check_flag == NOR) and \
            new == 0:
        settings.set(setting, val.get())

    if retval == 1:
        pub.sendMessage('increment_error_count')

    return retval


def position_window(win, width, height):
    '''
    centers a tkinter Toplevel window to its master
    Source: https://stackoverflow.com/questions/36050192/how-to-position-toplevel-widget-relative-to-root-window
    :param width: the Toplevel window width
    :param height: the Toplevel window height
    :param win: the Toplevel window to center
    '''
    win.update_idletasks()

    master = win.master
    x = master.winfo_x()
    y = master.winfo_y()

    x -= width
    win.geometry('{}x{}+{}+{}'.format(width, height, x, y))

    win.deiconify()
